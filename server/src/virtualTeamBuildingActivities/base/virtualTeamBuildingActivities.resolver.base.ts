/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VirtualTeamBuildingActivities } from "./VirtualTeamBuildingActivities";
import { VirtualTeamBuildingActivitiesCountArgs } from "./VirtualTeamBuildingActivitiesCountArgs";
import { VirtualTeamBuildingActivitiesFindManyArgs } from "./VirtualTeamBuildingActivitiesFindManyArgs";
import { VirtualTeamBuildingActivitiesFindUniqueArgs } from "./VirtualTeamBuildingActivitiesFindUniqueArgs";
import { CreateVirtualTeamBuildingActivitiesArgs } from "./CreateVirtualTeamBuildingActivitiesArgs";
import { UpdateVirtualTeamBuildingActivitiesArgs } from "./UpdateVirtualTeamBuildingActivitiesArgs";
import { DeleteVirtualTeamBuildingActivitiesArgs } from "./DeleteVirtualTeamBuildingActivitiesArgs";
import { RecognitionAndRewards } from "../../recognitionAndRewards/base/RecognitionAndRewards";
import { VirtualTeamBuildingActivitiesService } from "../virtualTeamBuildingActivities.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VirtualTeamBuildingActivities)
export class VirtualTeamBuildingActivitiesResolverBase {
  constructor(
    protected readonly service: VirtualTeamBuildingActivitiesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VirtualTeamBuildingActivities",
    action: "read",
    possession: "any",
  })
  async _virtualTeamBuildingActivitiesItemsMeta(
    @graphql.Args() args: VirtualTeamBuildingActivitiesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VirtualTeamBuildingActivities])
  @nestAccessControl.UseRoles({
    resource: "VirtualTeamBuildingActivities",
    action: "read",
    possession: "any",
  })
  async virtualTeamBuildingActivitiesItems(
    @graphql.Args() args: VirtualTeamBuildingActivitiesFindManyArgs
  ): Promise<VirtualTeamBuildingActivities[]> {
    return this.service.virtualTeamBuildingActivitiesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VirtualTeamBuildingActivities, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VirtualTeamBuildingActivities",
    action: "read",
    possession: "own",
  })
  async virtualTeamBuildingActivities(
    @graphql.Args() args: VirtualTeamBuildingActivitiesFindUniqueArgs
  ): Promise<VirtualTeamBuildingActivities | null> {
    const result = await this.service.virtualTeamBuildingActivities(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VirtualTeamBuildingActivities)
  @nestAccessControl.UseRoles({
    resource: "VirtualTeamBuildingActivities",
    action: "create",
    possession: "any",
  })
  async createVirtualTeamBuildingActivities(
    @graphql.Args() args: CreateVirtualTeamBuildingActivitiesArgs
  ): Promise<VirtualTeamBuildingActivities> {
    return await this.service.createVirtualTeamBuildingActivities({
      ...args,
      data: {
        ...args.data,

        rewards: args.data.rewards
          ? {
              connect: args.data.rewards,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VirtualTeamBuildingActivities)
  @nestAccessControl.UseRoles({
    resource: "VirtualTeamBuildingActivities",
    action: "update",
    possession: "any",
  })
  async updateVirtualTeamBuildingActivities(
    @graphql.Args() args: UpdateVirtualTeamBuildingActivitiesArgs
  ): Promise<VirtualTeamBuildingActivities | null> {
    try {
      return await this.service.updateVirtualTeamBuildingActivities({
        ...args,
        data: {
          ...args.data,

          rewards: args.data.rewards
            ? {
                connect: args.data.rewards,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VirtualTeamBuildingActivities)
  @nestAccessControl.UseRoles({
    resource: "VirtualTeamBuildingActivities",
    action: "delete",
    possession: "any",
  })
  async deleteVirtualTeamBuildingActivities(
    @graphql.Args() args: DeleteVirtualTeamBuildingActivitiesArgs
  ): Promise<VirtualTeamBuildingActivities | null> {
    try {
      return await this.service.deleteVirtualTeamBuildingActivities(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => RecognitionAndRewards, {
    nullable: true,
    name: "rewards",
  })
  @nestAccessControl.UseRoles({
    resource: "RecognitionAndRewards",
    action: "read",
    possession: "any",
  })
  async getRewards(
    @graphql.Parent() parent: VirtualTeamBuildingActivities
  ): Promise<RecognitionAndRewards | null> {
    const result = await this.service.getRewards(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
