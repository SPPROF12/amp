/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { VirtualTeamBuildingActivitiesService } from "../virtualTeamBuildingActivities.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VirtualTeamBuildingActivitiesCreateInput } from "./VirtualTeamBuildingActivitiesCreateInput";
import { VirtualTeamBuildingActivities } from "./VirtualTeamBuildingActivities";
import { VirtualTeamBuildingActivitiesFindManyArgs } from "./VirtualTeamBuildingActivitiesFindManyArgs";
import { VirtualTeamBuildingActivitiesWhereUniqueInput } from "./VirtualTeamBuildingActivitiesWhereUniqueInput";
import { VirtualTeamBuildingActivitiesUpdateInput } from "./VirtualTeamBuildingActivitiesUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class VirtualTeamBuildingActivitiesControllerBase {
  constructor(
    protected readonly service: VirtualTeamBuildingActivitiesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VirtualTeamBuildingActivities })
  @nestAccessControl.UseRoles({
    resource: "VirtualTeamBuildingActivities",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createVirtualTeamBuildingActivities(
    @common.Body() data: VirtualTeamBuildingActivitiesCreateInput
  ): Promise<VirtualTeamBuildingActivities> {
    return await this.service.createVirtualTeamBuildingActivities({
      data: {
        ...data,

        rewards: data.rewards
          ? {
              connect: data.rewards,
            }
          : undefined,
      },
      select: {
        activityDate: true,
        createdAt: true,
        description: true,
        durationMinutes: true,
        id: true,
        maxParticipants: true,

        rewards: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [VirtualTeamBuildingActivities] })
  @ApiNestedQuery(VirtualTeamBuildingActivitiesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VirtualTeamBuildingActivities",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async virtualTeamBuildingActivitiesItems(
    @common.Req() request: Request
  ): Promise<VirtualTeamBuildingActivities[]> {
    const args = plainToClass(
      VirtualTeamBuildingActivitiesFindManyArgs,
      request.query
    );
    return this.service.virtualTeamBuildingActivitiesItems({
      ...args,
      select: {
        activityDate: true,
        createdAt: true,
        description: true,
        durationMinutes: true,
        id: true,
        maxParticipants: true,

        rewards: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VirtualTeamBuildingActivities })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VirtualTeamBuildingActivities",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async virtualTeamBuildingActivities(
    @common.Param() params: VirtualTeamBuildingActivitiesWhereUniqueInput
  ): Promise<VirtualTeamBuildingActivities | null> {
    const result = await this.service.virtualTeamBuildingActivities({
      where: params,
      select: {
        activityDate: true,
        createdAt: true,
        description: true,
        durationMinutes: true,
        id: true,
        maxParticipants: true,

        rewards: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VirtualTeamBuildingActivities })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VirtualTeamBuildingActivities",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateVirtualTeamBuildingActivities(
    @common.Param() params: VirtualTeamBuildingActivitiesWhereUniqueInput,
    @common.Body() data: VirtualTeamBuildingActivitiesUpdateInput
  ): Promise<VirtualTeamBuildingActivities | null> {
    try {
      return await this.service.updateVirtualTeamBuildingActivities({
        where: params,
        data: {
          ...data,

          rewards: data.rewards
            ? {
                connect: data.rewards,
              }
            : undefined,
        },
        select: {
          activityDate: true,
          createdAt: true,
          description: true,
          durationMinutes: true,
          id: true,
          maxParticipants: true,

          rewards: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VirtualTeamBuildingActivities })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VirtualTeamBuildingActivities",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteVirtualTeamBuildingActivities(
    @common.Param() params: VirtualTeamBuildingActivitiesWhereUniqueInput
  ): Promise<VirtualTeamBuildingActivities | null> {
    try {
      return await this.service.deleteVirtualTeamBuildingActivities({
        where: params,
        select: {
          activityDate: true,
          createdAt: true,
          description: true,
          durationMinutes: true,
          id: true,
          maxParticipants: true,

          rewards: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
