/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RecognitionAndRewardsService } from "../recognitionAndRewards.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RecognitionAndRewardsCreateInput } from "./RecognitionAndRewardsCreateInput";
import { RecognitionAndRewards } from "./RecognitionAndRewards";
import { RecognitionAndRewardsFindManyArgs } from "./RecognitionAndRewardsFindManyArgs";
import { RecognitionAndRewardsWhereUniqueInput } from "./RecognitionAndRewardsWhereUniqueInput";
import { RecognitionAndRewardsUpdateInput } from "./RecognitionAndRewardsUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RecognitionAndRewardsControllerBase {
  constructor(
    protected readonly service: RecognitionAndRewardsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RecognitionAndRewards })
  @nestAccessControl.UseRoles({
    resource: "RecognitionAndRewards",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRecognitionAndRewards(
    @common.Body() data: RecognitionAndRewardsCreateInput
  ): Promise<RecognitionAndRewards> {
    return await this.service.createRecognitionAndRewards({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        recipient: true,
        recognitionTitle: true,
        rewardAmount: true,
        rewardDate: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [RecognitionAndRewards] })
  @ApiNestedQuery(RecognitionAndRewardsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RecognitionAndRewards",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async recognitionAndRewardsItems(
    @common.Req() request: Request
  ): Promise<RecognitionAndRewards[]> {
    const args = plainToClass(RecognitionAndRewardsFindManyArgs, request.query);
    return this.service.recognitionAndRewardsItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        recipient: true,
        recognitionTitle: true,
        rewardAmount: true,
        rewardDate: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RecognitionAndRewards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RecognitionAndRewards",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async recognitionAndRewards(
    @common.Param() params: RecognitionAndRewardsWhereUniqueInput
  ): Promise<RecognitionAndRewards | null> {
    const result = await this.service.recognitionAndRewards({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        recipient: true,
        recognitionTitle: true,
        rewardAmount: true,
        rewardDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RecognitionAndRewards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RecognitionAndRewards",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRecognitionAndRewards(
    @common.Param() params: RecognitionAndRewardsWhereUniqueInput,
    @common.Body() data: RecognitionAndRewardsUpdateInput
  ): Promise<RecognitionAndRewards | null> {
    try {
      return await this.service.updateRecognitionAndRewards({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          recipient: true,
          recognitionTitle: true,
          rewardAmount: true,
          rewardDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RecognitionAndRewards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RecognitionAndRewards",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRecognitionAndRewards(
    @common.Param() params: RecognitionAndRewardsWhereUniqueInput
  ): Promise<RecognitionAndRewards | null> {
    try {
      return await this.service.deleteRecognitionAndRewards({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          recipient: true,
          recognitionTitle: true,
          rewardAmount: true,
          rewardDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
